{"version":3,"sources":["frontend/base/default/ebanx/js/input-handler.js"],"names":["maskValues","br","changeOnLenght","masks","ar","co","cl","handler","max","element","toggleMask","value","length","VMasker","maskPattern","toPattern","inputHandler","inputDoc","country","add","classList","docMaskValues","toLowerCase","e","target","taxvatLabel","document","querySelector","innerHTML","label","style","display","hideTaxVat","taxvat","selectOption","elements","option","getElementById","forEach","elem"],"mappings":"aAAA,IAAAA,WAAA,CAGEC,GAAI,CADAD,MAAAA,CAAAA,kBAAa,sBACjBC,eAAI,IAEFC,GAAAA,CAHeC,MAAA,CAAA,iBAKjBC,eAAI,GAEFF,GAAAA,CAPeC,MAAA,CAAA,SAAA,cASjBE,eAAI,GAEFH,GAAAA,CAXeC,MAAA,CAAA,gBAajBG,eAAI,IAbNC,QAAA,SAAAJ,EAAAK,EAAAC,GAoBE,IAAIC,EAAa,EADbH,IAAAA,IACJG,EAAIA,EAAJC,MAAAC,OAAAJ,EAAA,EAAA,GAEEE,QAAAA,GAAaD,SACdI,QAAAJ,GAAAK,YAAAX,EAAAO,IACDG,EAAQJ,MAARI,QAAAE,UAAAN,EAAAE,MAAAR,EAAAO,KALFM,aAAA,SAAAC,EAAAC,GAYID,GADc,OAAZC,GADAF,EAAAA,UAAeG,IAAA,+BAEjBF,WAASG,EAAUD,gBAAIF,EAAA,CACxB,IAAAI,EAAArB,WAAAkB,EAAAI,eAICT,QAAQI,GAAUH,YAAYO,EAAclB,MAAM,IAFpDc,EAAIjB,iBAAmBsB,QAAnB,SAAAC,GAAqCN,QAAUI,EAAAlB,MAAAkB,EAAAnB,eAAAqB,EAAAC,UAAA,KAGLjB,gBAAQc,SAAAA,GAA+D,IAAEI,EAArHC,SAAAC,cAAA,uBACDF,IATHA,EAAAG,UAAAC,IAaQJ,WAAAA,WACN,IAAIA,EAAaC,SAAAC,cAAA,uBACfF,IACDA,EAAAK,MAAAC,QAAA,QAGH,IAAMC,EAAaN,SAAbM,eAAmB,UAAEC,IACzBA,EAAMR,MAAAA,QAAcC,SAWhBQ,aAAe,SAACC,EAAUC,GANxBH,GAAkBI,OAATX,GANjBS,EAAAG,QAAA,SAAAC,GAkBOA,EAAK5B,QAAUyB,GANhBF,EAAAA,aAAe,WAAfA","file":"input-handler.js","sourcesContent":["/* global VMasker */\n\nconst maskValues = {\n  br: {\n    masks: ['999.999.999-999', '99.999.999/9999-99'],\n    changeOnLenght: 14,\n  },\n  ar: {\n    masks: ['SS-SSSSSSSS-S'],\n    changeOnLenght: 0,\n  },\n  co: {\n    masks: ['999999', '9999999999'],\n    changeOnLenght: 6,\n  },\n  cl: {\n    masks: ['99.999.999-S'],\n    changeOnLenght: 0,\n  },\n};\n\nconst handler = (masks, max, element) => {\n  let toggleMask = 0;\n  if(max !== 0){\n    toggleMask = element.value.length > max ? 1 : 0;\n  }\n  VMasker(element).unMask();\n  VMasker(element).maskPattern(masks[toggleMask]);\n  element.value = VMasker.toPattern(element.value, masks[toggleMask]);\n};\n\nconst inputHandler = (inputDoc, country) => { // eslint-disable-line no-unused-vars\n  if (country === 'AR') {\n    inputDoc.classList.add('validate-ar-document-length');\n  }\n\n  if (maskValues[country.toLowerCase()] && inputDoc) {\n    const docMaskValues = maskValues[country.toLowerCase()];\n    VMasker(inputDoc).maskPattern(docMaskValues.masks[0]);\n    inputDoc.addEventListener('input', (e) => { handler(docMaskValues.masks, docMaskValues.changeOnLenght, e.target); }, false);\n  }\n};\n\nconst initTaxVatLabel = (label) => { // eslint-disable-line no-unused-vars\n  const taxvatLabel = document.querySelector('label[for=\"taxvat\"]');\n  if (taxvatLabel) {\n    taxvatLabel.innerHTML = label;\n  }\n};\n\nconst hideTaxVat = () => { // eslint-disable-line no-unused-vars\n  const taxvatLabel = document.querySelector('label[for=\"taxvat\"]');\n  if (taxvatLabel) {\n    taxvatLabel.style.display = 'none';\n  }\n\n  const taxvat = document.getElementById('taxvat');\n  if (taxvat) {\n    taxvat.style.display = 'none';\n  }\n};\n\nconst selectOption = (elements, option) => { // eslint-disable-line no-unused-vars\n  if (!elements || elements === null) {\n    return;\n  }\n\n  elements.forEach((elem) => {\n    if(elem.value === option) {\n      elem.setAttribute('selected', 'selected');\n    }\n  });\n};\n"]}