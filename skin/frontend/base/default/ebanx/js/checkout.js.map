{"version":3,"sources":["frontend/base/default/ebanx/js/checkout.js"],"names":["hasClass","element","cls","className","indexOf","resetValidations","form","selector","Array","from","querySelectorAll","forEach","inputRequired","remove","classList","style","display","addRequiredClassToInputs","inputNodeList","validationClass","inputToValidate","validationFormListener","creditCardOptions","inputSelector","cardOption","selectSelector","addEventListener","event","target","parentElement","console","initCreditCardOption","creditCardOption","querySelector","handleEbanxForm","countryCode","paymentType","formId","document","getById","cardName","responseData","cardExpirationMonth","cardNumber","cardExpirationYear","cardCvv","ebanxToken","ebanxBrand","ebanxMaskedCardNumber","ebanxDeviceFingerprint","ebanxMode","ebanxCountry","mode","value","EBANX","config","setMode","ebanxIntegrationKey","setCountry","placeOrderButton","shouldDisable","disabled","saveToken","data","response","errorMessage","error","message","errors","status_code","disableBtnPlaceOrder","Validation","advices","showAdvice","errorDiv","payment_type_code","deviceId","handleToken","length","isFormEmpty","card_number","card_name","replace","card_due_date","parseInt","card_cvv","hideAdvice","clearResponseData"],"mappings":"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","file":"checkout.js","sourcesContent":["/* global EBANX */\n/* global Validation */\n\nconst hasClass = (element, cls) => {\n  return (` ${element.className} `).indexOf(` ${cls} `) > -1;\n};\n\nconst resetValidations = (form, selector) => {\n  Array.from(form.querySelectorAll(selector)).forEach((inputRequired) => {\n    inputRequired.classList.remove('required-entry', 'validation-failed', 'brand-required');\n    if (inputRequired.nextElementSibling && hasClass(inputRequired.nextElementSibling, 'validation-advice')) {\n      inputRequired.nextElementSibling.style.display = 'none';\n    }\n  });\n};\n\nconst addRequiredClassToInputs = (inputNodeList, validationClass, form, selector) => {\n  resetValidations(form, selector);\n  Array.from(inputNodeList).forEach((inputToValidate) => {\n    inputToValidate.classList.add(validationClass);\n  });\n};\n\nconst validationFormListener = (form, creditCardOptions) => {\n  const inputSelector = '.required-entry-input';\n  const selectSelector = '.required-entry-select';\n  Array.from(creditCardOptions).forEach((cardOption) => {\n    cardOption.querySelector('input[type=radio]').addEventListener('change', (event) => {\n      console.log(event.target);\n      addRequiredClassToInputs(event.target.parentElement.querySelectorAll(inputSelector), 'required-entry', form, inputSelector);\n      addRequiredClassToInputs(event.target.parentElement.querySelectorAll(selectSelector), 'validate-select', form, selectSelector);\n    });\n  });\n};\n\nconst initCreditCardOption = (creditCardOption, form) => {\n  const element = creditCardOption.querySelector('input[type=radio]');\n  const inputSelector = '.required-entry-input';\n  element.checked = true;\n  addRequiredClassToInputs(element.parentElement.querySelectorAll(inputSelector), 'required-entry', form, inputSelector);\n};\n\nvar handleEbanxForm = (countryCode, paymentType, formId) => { // eslint-disable-line no-unused-vars\n  const form = document.querySelector(`#${formId}`);\n  const creditCardOptions = form.querySelectorAll('.ebanx-credit-card-option');\n\n  validationFormListener(form, creditCardOptions);\n  initCreditCardOption(creditCardOptions[0], form);\n\n  const getById = function (element) {\n    return document.getElementById(element);\n  };\n  let responseData = null;\n\n  const cardName = getById('ebanx_' + paymentType + '_' + countryCode + '_' + paymentType + '_name');\n  const cardNumber = getById('ebanx_' + paymentType + '_' + countryCode + '_' + paymentType + '_number');\n  const cardExpirationMonth = getById('ebanx_' + paymentType + '_' + countryCode + '_expiration');\n  const cardExpirationYear = getById('ebanx_' + paymentType + '_' + countryCode + '_expiration_yr');\n  const cardCvv = getById('ebanx_' + paymentType + '_' + countryCode + '_' + paymentType + '_cid');\n  const ebanxToken = getById('ebanx_' + paymentType + '_' + countryCode + '_token');\n  const ebanxBrand = getById('ebanx_' + paymentType + '_' + countryCode + '_brand');\n  const ebanxMaskedCardNumber = getById('ebanx_' + paymentType + '_' + countryCode + '_masked_card_number');\n  const ebanxDeviceFingerprint = getById('ebanx_' + paymentType + '_' + countryCode + '_device_fingerprint');\n  const ebanxMode = getById('ebanx_' + paymentType + '_' + countryCode + '_mode');\n  const ebanxIntegrationKey = getById('ebanx_' + paymentType + '_' + countryCode + '_integration_key');\n  const ebanxCountry = getById('ebanx_' + paymentType + '_' + countryCode + '_country');\n  const errorDiv = getById('ebanx-error-message');\n\n  const hasEbanxForm = typeof getById('payment_form_ebanx_' + paymentType + '_' + countryCode) !== 'undefined';\n\n  const mode = ebanxMode.value === 'sandbox' ? 'test' : 'production';\n\n  EBANX.config.setMode(mode);\n  EBANX.config.setPublishableKey(ebanxIntegrationKey.value);\n  EBANX.config.setCountry(ebanxCountry.value);\n\n  const isFormEmpty = () => {\n    return !cardNumber.value.length ||\n      !cardName.value.length ||\n      !cardExpirationMonth.value.length ||\n      !cardExpirationYear.value.length ||\n      !cardCvv.value.length;\n  };\n\n  const disableBtnPlaceOrder = (shouldDisable) => {\n    const placeOrderButton = document.querySelector('#review-buttons-container > button');\n    if (typeof placeOrderButton !== 'undefined' && placeOrderButton) {\n      placeOrderButton.disabled = shouldDisable;\n    }\n  };\n\n  const saveToken = (response) => {\n    if (!response.data.hasOwnProperty('status')) {\n      const error = response.error.err;\n      let errorMessage = error.message;\n\n      if (!error.message) {\n        EBANX.errors.InvalidValueFieldError(error.status_code);\n        errorMessage = EBANX.errors.message || 'Some error happened. Please, verify the data of your credit card and try again.';\n      }\n\n      errorDiv.innerHTML = errorMessage;\n      disableBtnPlaceOrder(false);\n\n      setTimeout(() => {\n        Validation.showAdvice({\n          advices: false,\n        }, errorDiv, 'ebanx-error-message');\n      }, 1000);\n\n      return false;\n    }\n\n    responseData = response.data;\n    ebanxToken.value = responseData.token;\n    ebanxBrand.value = responseData.payment_type_code;\n    ebanxMaskedCardNumber.value = responseData.masked_card_number;\n    ebanxDeviceFingerprint.value = responseData.deviceId;\n\n    disableBtnPlaceOrder(false);\n  };\n\n  const generateToken = () => {\n    if (!responseData) {\n      disableBtnPlaceOrder(true);\n\n      EBANX.card.createToken({\n        card_number: parseInt(cardNumber.value.replace(/ /g, '')),\n        card_name: cardName.value,\n        card_due_date: (parseInt(cardExpirationMonth.value) || 0) + '/' + (parseInt(cardExpirationYear.value) || 0),\n        card_cvv: cardCvv.value,\n      }, saveToken);\n    }\n  };\n\n  const handleToken = () => {\n    if (!isFormEmpty()) {\n      generateToken();\n    }\n  };\n\n  const clearResponseData = () => {\n    responseData = null;\n    ebanxToken.value = '';\n    ebanxBrand.value = '';\n    ebanxMaskedCardNumber.value = '';\n    ebanxDeviceFingerprint.value = '';\n    Validation.hideAdvice({\n      advices: false,\n    }, errorDiv);\n  };\n\n  if (hasEbanxForm) {\n    cardName.addEventListener('blur', handleToken, false);\n    cardNumber.addEventListener('blur', handleToken, false);\n    cardExpirationMonth.addEventListener('blur', handleToken, false);\n    cardExpirationYear.addEventListener('blur', handleToken, false);\n    cardCvv.addEventListener('blur', handleToken, false);\n\n    cardName.addEventListener('change', clearResponseData, false);\n    cardNumber.addEventListener('change', clearResponseData, false);\n    cardExpirationMonth.addEventListener('change', clearResponseData, false);\n    cardExpirationYear.addEventListener('change', clearResponseData, false);\n    cardCvv.addEventListener('change', clearResponseData, false);\n  }\n};\n"]}