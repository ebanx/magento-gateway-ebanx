{"version":3,"sources":["frontend/base/default/ebanx/js/checkout.js"],"names":["handleEbanxForm","countryCode","paymentType","getById","element","cardName","responseData","cardExpirationMonth","cardNumber","cardExpirationYear","cardCvv","ebanxToken","ebanxBrand","ebanxMaskedCardNumber","ebanxDeviceFingerprint","ebanxMode","ebanxCountry","mode","value","EBANX","config","setMode","ebanxIntegrationKey","setCountry","placeOrderButton","document","querySelector","shouldDisable","disabled","saveToken","data","response","errorMessage","error","message","errors","status_code","disableBtnPlaceOrder","Validation","advices","showAdvice","errorDiv","payment_type_code","deviceId","handleToken","length","isFormEmpty","card_number","card_name","replace","card_due_date","parseInt","card_cvv","hideAdvice","addEventListener","clearResponseData"],"mappings":"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","file":"checkout.js","sourcesContent":["/* global EBANX */\n/* global Validation */\n\nvar handleEbanxForm = (countryCode, paymentType) => { // eslint-disable-line no-unused-vars\n  const getById = function(element) {\n    return document.getElementById(element);\n  };\n  let responseData = null;\n\n  const cardName = getById('ebanx_' + paymentType + '_' + countryCode + '_' + paymentType + '_name');\n  const cardNumber = getById('ebanx_' + paymentType + '_' + countryCode + '_' + paymentType + '_number');\n  const cardExpirationMonth = getById('ebanx_' + paymentType + '_' + countryCode + '_expiration');\n  const cardExpirationYear = getById('ebanx_' + paymentType + '_' + countryCode + '_expiration_yr');\n  const cardCvv = getById('ebanx_' + paymentType + '_' + countryCode + '_' + paymentType + '_cid');\n  const ebanxToken = getById('ebanx_' + paymentType + '_' + countryCode + '_token');\n  const ebanxBrand = getById('ebanx_' + paymentType + '_' + countryCode + '_brand');\n  const ebanxMaskedCardNumber = getById('ebanx_' + paymentType + '_' + countryCode + '_masked_card_number');\n  const ebanxDeviceFingerprint = getById('ebanx_' + paymentType + '_' + countryCode + '_device_fingerprint');\n  const ebanxMode = getById('ebanx_' + paymentType + '_' + countryCode + '_mode');\n  const ebanxIntegrationKey = getById('ebanx_' + paymentType + '_' + countryCode + '_integration_key');\n  const ebanxCountry = getById('ebanx_' + paymentType + '_' + countryCode + '_country');\n  const errorDiv = getById('ebanx-error-message');\n\n  const hasEbanxForm = typeof getById('payment_form_ebanx_' + paymentType + '_' + countryCode) !== 'undefined';\n\n  const mode = ebanxMode.value === 'sandbox' ? 'test' : 'production';\n\n  EBANX.config.setMode(mode);\n  EBANX.config.setPublishableKey(ebanxIntegrationKey.value);\n  EBANX.config.setCountry(ebanxCountry.value);\n\n  const isFormEmpty = () => {\n    return !cardNumber.value.length ||\n      !cardName.value.length ||\n      !cardExpirationMonth.value.length ||\n      !cardExpirationYear.value.length ||\n      !cardCvv.value.length;\n  };\n\n  const disableBtnPlaceOrder = (shouldDisable) => {\n    const placeOrderButton = document.querySelector('#review-buttons-container > button');\n    if (typeof placeOrderButton !== 'undefined' && placeOrderButton) {\n      placeOrderButton.disabled = shouldDisable;\n    }\n  };\n\n  const saveToken = (response) => {\n    if (!response.data.hasOwnProperty('status')) {\n      const error = response.error.err;\n      let errorMessage = error.message;\n\n      if (!error.message) {\n        EBANX.errors.InvalidValueFieldError(error.status_code);\n        errorMessage = EBANX.errors.message || 'Some error happened. Please, verify the data of your credit card and try again.';\n      }\n\n      errorDiv.innerHTML = errorMessage;\n      disableBtnPlaceOrder(false);\n\n      setTimeout(() => {\n        Validation.showAdvice({\n          advices: false,\n        }, errorDiv, 'ebanx-error-message');\n      }, 1000);\n\n      return false;\n    }\n\n    responseData = response.data;\n    ebanxToken.value = responseData.token;\n    ebanxBrand.value = responseData.payment_type_code;\n    ebanxMaskedCardNumber.value = responseData.masked_card_number;\n    ebanxDeviceFingerprint.value = responseData.deviceId;\n\n    disableBtnPlaceOrder(false);\n  };\n\n  const generateToken = () => {\n    if (!responseData) {\n      disableBtnPlaceOrder(true);\n\n      EBANX.card.createToken({\n        card_number: parseInt(cardNumber.value.replace(/ /g, '')),\n        card_name: cardName.value,\n        card_due_date: (parseInt(cardExpirationMonth.value) || 0) + '/' + (parseInt(cardExpirationYear.value) || 0),\n        card_cvv: cardCvv.value,\n      }, saveToken);\n    }\n  };\n\n  const handleToken = () => {\n    if (!isFormEmpty()) {\n      generateToken();\n    }\n  };\n\n  const clearResponseData = () => {\n    responseData = null;\n    ebanxToken.value = '';\n    ebanxBrand.value = '';\n    ebanxMaskedCardNumber.value = '';\n    ebanxDeviceFingerprint.value = '';\n    Validation.hideAdvice({\n      advices: false,\n    }, errorDiv);\n  };\n\n  if (hasEbanxForm) {\n    cardName.addEventListener('blur', handleToken, false);\n    cardNumber.addEventListener('blur', handleToken, false);\n    cardExpirationMonth.addEventListener('blur', handleToken, false);\n    cardExpirationYear.addEventListener('blur', handleToken, false);\n    cardCvv.addEventListener('blur', handleToken, false);\n\n    cardName.addEventListener('change', clearResponseData, false);\n    cardNumber.addEventListener('change', clearResponseData, false);\n    cardExpirationMonth.addEventListener('change', clearResponseData, false);\n    cardExpirationYear.addEventListener('change', clearResponseData, false);\n    cardCvv.addEventListener('change', clearResponseData, false);\n  }\n};\n"]}