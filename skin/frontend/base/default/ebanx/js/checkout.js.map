{"version":3,"sources":["frontend/base/default/ebanx/js/checkout.js"],"names":["waitFor","elementFinder","callback","waiter","setInterval","element","clearInterval","hasClass","cls","className","indexOf","resetValidations","form","selector","Array","from","querySelectorAll","forEach","inputRequired","remove","classList","style","display","addRequiredClassToInputs","inputNodeList","validationClass","inputToValidate","add","validationFormListener","creditCardOptions","inputSelector","cardOption","selectSelector","addEventListener","event","parentElement","target","initCreditCardOption","creditCardOption","querySelector","initCreditCardWithoutSavedCards","initCreditCardForm","length","handleEbanxForm","countryCode","paymentType","formListId","document","formList","getById","initCreditCardOptions","responseData","getElementById","cardName","cardExpirationMonth","cardNumber","cardExpirationYear","cardCvv","ebanxToken","ebanxBrand","ebanxMaskedCardNumber","ebanxDeviceFingerprint","ebanxMode","ebanxCountry","mode","value","EBANX","config","setMode","ebanxIntegrationKey","setCountry","placeOrderButton","shouldDisable","disabled","saveToken","data","response","errorMessage","error","message","errors","status_code","disableBtnPlaceOrder","Validation","advices","showAdvice","errorDiv","payment_type_code","deviceId","handleToken","isFormEmpty","card_number","card_name","replace","card_due_date","parseInt","card_cvv","hideAdvice","clearResponseData"],"mappings":"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","file":"checkout.js","sourcesContent":["/* global EBANX */\n/* global Validation */\n\nconst waitFor = (elementFinder, callback) => {\n  const waiter = setInterval(() => {\n    const element = elementFinder();\n    if (typeof element === 'undefined' || element === null) {\n      return false;\n    }\n    clearInterval(waiter);\n    callback(element);\n  }, 500);\n};\n\nconst hasClass = (element, cls) => {\n  return (` ${element.className} `).indexOf(` ${cls} `) > -1;\n};\n\nconst resetValidations = (form, selector) => {\n  Array.from(form.querySelectorAll(selector)).forEach((inputRequired) => {\n    inputRequired.classList.remove('required-entry', 'validation-failed', 'brand-required');\n    if (inputRequired.nextElementSibling && hasClass(inputRequired.nextElementSibling, 'validation-advice')) {\n      inputRequired.nextElementSibling.style.display = 'none';\n    }\n  });\n};\n\nconst addRequiredClassToInputs = (inputNodeList, validationClass, form, selector) => {\n  resetValidations(form, selector);\n  Array.from(inputNodeList).forEach((inputToValidate) => {\n    inputToValidate.classList.add(validationClass);\n    if(hasClass(inputToValidate, 'hidden-input-brand')){\n      inputToValidate.classList.add('brand-required');\n      inputToValidate.classList.remove('required-entry');\n    }\n  });\n};\n\nconst validationFormListener = (form, creditCardOptions) => {\n  const inputSelector = '.required-entry-input';\n  const selectSelector = '.required-entry-select';\n  Array.from(creditCardOptions).forEach((cardOption) => {\n    cardOption.querySelector('input[type=radio]').addEventListener('change', (event) => {\n      addRequiredClassToInputs(event.target.parentElement.querySelectorAll(inputSelector), 'required-entry', form, inputSelector);\n      addRequiredClassToInputs(event.target.parentElement.querySelectorAll(selectSelector), 'validate-select', form, selectSelector);\n    });\n  });\n};\n\nconst initCreditCardOption = (creditCardOption, form) => {\n  const element = creditCardOption.querySelector('input[type=radio]');\n  const inputSelector = '.required-entry-input';\n  element.checked = true;\n  addRequiredClassToInputs(element.parentElement.querySelectorAll(inputSelector), 'required-entry', form, inputSelector);\n};\n\nconst initCreditCardWithoutSavedCards = (form) => {\n  form.querySelectorAll('.required-entry-input').forEach((inputToValidate) => {\n    inputToValidate.classList.add('required-entry');\n  });\n  form.querySelectorAll('.required-entry-select').forEach((inputToValidate) => {\n    inputToValidate.classList.add('validate-select');\n  });\n};\n\nconst initCreditCardForm = (creditCardOptions, form) => {\n  if (creditCardOptions.length !== 0) {\n    validationFormListener(form, creditCardOptions);\n    initCreditCardOption(creditCardOptions[0], form);\n  } else {\n    initCreditCardWithoutSavedCards(form);\n  } \n};\n\nvar handleEbanxForm = (countryCode, paymentType, formListId) => { // eslint-disable-line no-unused-vars\n  const initCreditCardOptions = (formList) => {\n    const creditCardOptions = formList.querySelectorAll('.ebanx-credit-card-option');\n    initCreditCardForm(creditCardOptions, formList);\n  };\n\n  waitFor(() => {\n    return document.querySelector(`#${formListId}`);\n  }, initCreditCardOptions);\n\n  const getById = function (element) {\n    return document.getElementById(element);\n  };\n  \n  let responseData = null;\n\n  const cardName = getById('ebanx_' + paymentType + '_' + countryCode + '_' + paymentType + '_name');\n  const cardNumber = getById('ebanx_' + paymentType + '_' + countryCode + '_' + paymentType + '_number');\n  const cardExpirationMonth = getById('ebanx_' + paymentType + '_' + countryCode + '_expiration');\n  const cardExpirationYear = getById('ebanx_' + paymentType + '_' + countryCode + '_expiration_yr');\n  const cardCvv = getById('ebanx_' + paymentType + '_' + countryCode + '_' + paymentType + '_cid');\n  const ebanxToken = getById('ebanx_' + paymentType + '_' + countryCode + '_token');\n  const ebanxBrand = getById('ebanx_' + paymentType + '_' + countryCode + '_brand');\n  const ebanxMaskedCardNumber = getById('ebanx_' + paymentType + '_' + countryCode + '_masked_card_number');\n  const ebanxDeviceFingerprint = getById('ebanx_' + paymentType + '_' + countryCode + '_device_fingerprint');\n  const ebanxMode = getById('ebanx_' + paymentType + '_' + countryCode + '_mode');\n  const ebanxIntegrationKey = getById('ebanx_' + paymentType + '_' + countryCode + '_integration_key');\n  const ebanxCountry = getById('ebanx_' + paymentType + '_' + countryCode + '_country');\n  const errorDiv = getById('ebanx-error-message');\n\n  const hasEbanxForm = typeof getById('payment_form_ebanx_' + paymentType + '_' + countryCode) !== 'undefined';\n\n  const mode = ebanxMode.value === 'sandbox' ? 'test' : 'production';\n\n  EBANX.config.setMode(mode);\n  EBANX.config.setPublishableKey(ebanxIntegrationKey.value);\n  EBANX.config.setCountry(ebanxCountry.value);\n\n  const isFormEmpty = () => {\n    return !cardNumber.value.length ||\n      !cardName.value.length ||\n      !cardExpirationMonth.value.length ||\n      !cardExpirationYear.value.length ||\n      !cardCvv.value.length;\n  };\n\n  const disableBtnPlaceOrder = (shouldDisable) => {\n    const placeOrderButton = document.querySelector('#review-buttons-container > button');\n    if (typeof placeOrderButton !== 'undefined' && placeOrderButton) {\n      placeOrderButton.disabled = shouldDisable;\n    }\n  };\n\n  const saveToken = (response) => {\n    if (!response.data.hasOwnProperty('status')) {\n      const error = response.error.err;\n      let errorMessage = error.message;\n\n      if (!error.message) {\n        EBANX.errors.InvalidValueFieldError(error.status_code);\n        errorMessage = EBANX.errors.message || 'Some error happened. Please, verify the data of your credit card and try again.';\n      }\n\n      errorDiv.innerHTML = errorMessage;\n      disableBtnPlaceOrder(false);\n\n      setTimeout(() => {\n        Validation.showAdvice({\n          advices: false,\n        }, errorDiv, 'ebanx-error-message');\n      }, 500);\n\n      return false;\n    }\n\n    responseData = response.data;\n    ebanxToken.value = responseData.token;\n    ebanxBrand.value = responseData.payment_type_code;\n    ebanxMaskedCardNumber.value = responseData.masked_card_number;\n    ebanxDeviceFingerprint.value = responseData.deviceId;\n\n    disableBtnPlaceOrder(false);\n  };\n\n  const generateToken = () => {\n    if (!responseData) {\n      disableBtnPlaceOrder(true);\n\n      EBANX.card.createToken({\n        card_number: parseInt(cardNumber.value.replace(/ /g, '')),\n        card_name: cardName.value,\n        card_due_date: (parseInt(cardExpirationMonth.value) || 0) + '/' + (parseInt(cardExpirationYear.value) || 0),\n        card_cvv: cardCvv.value,\n      }, saveToken);\n    }\n  };\n\n  const handleToken = () => {\n    if (!isFormEmpty()) {\n      generateToken();\n    }\n  };\n\n  const clearResponseData = () => {\n    responseData = null;\n    ebanxToken.value = '';\n    ebanxBrand.value = '';\n    ebanxMaskedCardNumber.value = '';\n    ebanxDeviceFingerprint.value = '';\n    Validation.hideAdvice({\n      advices: false,\n    }, errorDiv);\n  };\n\n  if (hasEbanxForm) {\n    cardName.addEventListener('blur', handleToken, false);\n    cardNumber.addEventListener('blur', handleToken, false);\n    cardExpirationMonth.addEventListener('blur', handleToken, false);\n    cardExpirationYear.addEventListener('blur', handleToken, false);\n    cardCvv.addEventListener('blur', handleToken, false);\n\n    cardName.addEventListener('change', clearResponseData, false);\n    cardNumber.addEventListener('change', clearResponseData, false);\n    cardExpirationMonth.addEventListener('change', clearResponseData, false);\n    cardExpirationYear.addEventListener('change', clearResponseData, false);\n    cardCvv.addEventListener('change', clearResponseData, false);\n  }\n};\n"]}