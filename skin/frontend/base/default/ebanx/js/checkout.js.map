{"version":3,"sources":["frontend/base/default/ebanx/js/checkout.js"],"names":["invalidCardErrorMessage","ElementsObserver","elements","completionCallbacks","changeCallbacks","callback","element","forEach","every","value","trim","length","onChangeElement","addEventListener","event","target","addCompletionCallback","push","addChangeCallback","waiter","setInterval","elementFinder","waitFor","clearInterval","cls","className","indexOf","hasClass","selector","Array","from","form","inputRequired","classList","remove","nextElementSibling","resetValidations","addRequiredClassToInputs","inputNodeList","validationClass","inputToValidate","add","validationFormListener","creditCardOptions","inputSelector","selectSelector","cardOption","parentElement","querySelectorAll","initCreditCardOption","creditCardOption","querySelector","checked","initCreditCardWithoutSavedCards","formListId","initCreditCardOptions","formList","initCreditCardForm","getById","document","getElementById","responseData","cardName","countryCode","paymentType","cardNumber","cardExpirationMonth","cardCvv","cardExpirationYear","ebanxToken","ebanxBrand","ebanxMaskedCardNumber","ebanxMode","ebanxCountry","blurTargetElement","EBANX","config","setMode","mode","ebanxIntegrationKey","setCountry","disableBtnPlaceOrder","shouldDisable","setPublishableKey","createEvent","Validation","initEvent","message","elem","setTimeout","setCardErrorMessage","errorDiv","innerHTML","saveToken","response","data","token","hasOwnProperty","error","err","errorMessage","status_code","masked_card_number","ebanxDeviceFingerprint","deviceId","placeOrderButton","forceClickInPlaceOrder","advices","hasEbanxForm","clearResponseData","blurTarget","type","generateToken","card","createToken","card_number","parseInt","replace","card_name","card_cvv","setAttribute","elm"],"mappings":"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","file":"checkout.js","sourcesContent":["/* global EBANX */\n/* global Validation */\n\nconst invalidCardErrorMessage = 'Some error happened. Please, verify the data of your card and try again.';\n\n// Observer for elements\nfunction ElementsObserver(elements) {\n  const completionCallbacks = [];\n  const changeCallbacks = [];\n\n  function addCompletionCallback(callback) {\n    completionCallbacks.push(callback);\n    return this;\n  }\n\n  function addChangeCallback(callback) {\n    changeCallbacks.push(callback);\n    return this;\n  }\n\n  function areAllElementsFilled() {\n    return elements.every(element => element.value && element.value.trim().length);\n  }\n\n  function notifyElementChange(element) {\n    changeCallbacks.forEach(callback => {\n      if (callback) callback(element);\n    });\n  }\n\n  function notifyCompletion() {\n    completionCallbacks.forEach(callback => {\n      if (callback) callback();\n    });\n  }\n\n  function onChangeElement(element) {\n    notifyElementChange(element);\n    if (areAllElementsFilled()) {\n      notifyCompletion();\n    }\n  }\n\n  // Init fields\n  elements.forEach(element => {\n    element.addEventListener('change', (event) => {\n      onChangeElement(event.target);\n    }, false);\n  });\n\n  return {\n    addCompletionCallback,\n    addChangeCallback,\n  };\n}\n\nconst waitFor = (elementFinder, callback) => {\n  const waiter = setInterval(() => {\n    const element = elementFinder();\n    if (typeof element === 'undefined' || element === null) {\n      return false;\n    }\n    clearInterval(waiter);\n    callback(element);\n  }, 500);\n};\n\nconst hasClass = (element, cls) => {\n  return (` ${element.className} `).indexOf(` ${cls} `) > -1;\n};\n\nconst resetValidations = (form, selector) => {\n  Array.from(form.querySelectorAll(selector)).forEach((inputRequired) => {\n    inputRequired.classList.remove('required-entry', 'validation-failed', 'brand-required');\n    if (inputRequired.nextElementSibling && hasClass(inputRequired.nextElementSibling, 'validation-advice')) {\n      inputRequired.nextElementSibling.style.display = 'none';\n    }\n  });\n};\n\nconst addRequiredClassToInputs = (inputNodeList, validationClass, form, selector) => {\n  resetValidations(form, selector);\n  Array.from(inputNodeList).forEach((inputToValidate) => {\n    inputToValidate.classList.add(validationClass);\n    if (hasClass(inputToValidate, 'hidden-input-brand')) {\n      inputToValidate.classList.add('brand-required');\n      inputToValidate.classList.remove('required-entry');\n    }\n  });\n};\n\nconst validationFormListener = (form, creditCardOptions) => {\n  const inputSelector = '.required-entry-input';\n  const selectSelector = '.required-entry-select';\n  Array.from(creditCardOptions).forEach((cardOption) => {\n    cardOption.querySelector('input[type=radio]').addEventListener('change', (event) => {\n      addRequiredClassToInputs(event.target.parentElement.querySelectorAll(inputSelector), 'required-entry', form, inputSelector);\n      addRequiredClassToInputs(event.target.parentElement.querySelectorAll(selectSelector), 'validate-select', form, selectSelector);\n    });\n  });\n};\n\nconst initCreditCardOption = (creditCardOption, form) => {\n  const element = creditCardOption.querySelector('input[type=radio]');\n  const inputSelector = '.required-entry-input';\n  element.checked = true;\n  addRequiredClassToInputs(element.parentElement.querySelectorAll(inputSelector), 'required-entry', form, inputSelector);\n};\n\nconst initCreditCardWithoutSavedCards = (form) => {\n  form.querySelectorAll('.required-entry-input').forEach((inputToValidate) => {\n    inputToValidate.classList.add('required-entry');\n  });\n  form.querySelectorAll('.required-entry-select').forEach((inputToValidate) => {\n    inputToValidate.classList.add('validate-select');\n  });\n};\n\nconst initCreditCardForm = (creditCardOptions, form) => {\n  if (creditCardOptions.length !== 0) {\n    validationFormListener(form, creditCardOptions);\n    initCreditCardOption(creditCardOptions[0], form);\n  } else {\n    initCreditCardWithoutSavedCards(form);\n  }\n};\n\nvar handleEbanxForm = (countryCode, paymentType, formListId) => { // eslint-disable-line no-unused-vars\n  const initCreditCardOptions = (formList) => {\n    const creditCardOptions = formList.querySelectorAll('.ebanx-credit-card-option');\n    initCreditCardForm(creditCardOptions, formList);\n  };\n\n  waitFor(() => {\n    return document.querySelector(`#${formListId}`);\n  }, initCreditCardOptions);\n\n  const getById = function (element) {\n    return document.getElementById(element);\n  };\n\n  let responseData = null;\n\n  const cardName = getById('ebanx_' + paymentType + '_' + countryCode + '_' + paymentType + '_name');\n  const cardNumber = getById('ebanx_' + paymentType + '_' + countryCode + '_' + paymentType + '_number');\n  const cardExpirationMonth = getById('ebanx_' + paymentType + '_' + countryCode + '_expiration');\n  const cardExpirationYear = getById('ebanx_' + paymentType + '_' + countryCode + '_expiration_yr');\n  const cardCvv = getById('ebanx_' + paymentType + '_' + countryCode + '_' + paymentType + '_cid');\n  const ebanxToken = getById('ebanx_' + paymentType + '_' + countryCode + '_token');\n  const ebanxBrand = getById('ebanx_' + paymentType + '_' + countryCode + '_brand');\n  const ebanxMaskedCardNumber = getById('ebanx_' + paymentType + '_' + countryCode + '_masked_card_number');\n  const ebanxDeviceFingerprint = getById('ebanx_' + paymentType + '_' + countryCode + '_device_fingerprint');\n  const ebanxMode = getById('ebanx_' + paymentType + '_' + countryCode + '_mode');\n  const ebanxIntegrationKey = getById('ebanx_' + paymentType + '_' + countryCode + '_integration_key');\n  const ebanxCountry = getById('ebanx_' + paymentType + '_' + countryCode + '_country');\n  const errorDiv = getById('ebanx-error-message');\n\n  const hasEbanxForm = typeof getById('payment_form_ebanx_' + paymentType + '_' + countryCode) !== 'undefined';\n\n  const mode = ebanxMode.value === 'sandbox' ? 'test' : 'production';\n\n  let blurTargetElement = null;\n\n  EBANX.config.setMode(mode);\n  EBANX.config.setPublishableKey(ebanxIntegrationKey.value);\n  EBANX.config.setCountry(ebanxCountry.value);\n\n  const disableBtnPlaceOrder = (shouldDisable) => {\n    const placeOrderButton = document.querySelector('#review-buttons-container > button');\n    if (typeof placeOrderButton !== 'undefined' && placeOrderButton) {\n      placeOrderButton.disabled = shouldDisable;\n    }\n  };\n\n  const forceClickInPlaceOrder = (elem) => {\n    if (!elem) {\n      return false;\n    }\n    var event = document.createEvent('Event');\n    event.initEvent('click', true, true);\n    elem.dispatchEvent(event);\n  };\n\n  const setCardErrorMessage = (message) => {\n    errorDiv.innerHTML = message;\n    disableBtnPlaceOrder(false);\n\n    setTimeout(() => {\n      Validation.showAdvice({\n        advices: false,\n      }, errorDiv, 'ebanx-error-message');\n    }, 500);\n\n    return false;\n  };\n\n  const saveToken = (response) => {\n    if (!response.data.token){\n      return setCardErrorMessage(invalidCardErrorMessage);\n    }\n\n    if (!response.data.hasOwnProperty('status')) {\n      const error = response.error.err;\n      let errorMessage = error.message;\n\n      if (!error.message) {\n        EBANX.errors.InvalidValueFieldError(error.status_code);\n        errorMessage = EBANX.errors.message || invalidCardErrorMessage;\n      }\n\n      return setCardErrorMessage(errorMessage);\n    }\n\n    responseData = response.data;\n    ebanxToken.value = responseData.token;\n    ebanxBrand.value = responseData.payment_type_code;\n    ebanxMaskedCardNumber.value = responseData.masked_card_number;\n    ebanxDeviceFingerprint.value = responseData.deviceId;\n\n    disableBtnPlaceOrder(false);\n    forceClickInPlaceOrder(blurTargetElement);\n  };\n\n  const generateToken = (blurTarget) => {\n    if (blurTarget && (blurTarget.type === 'button' || blurTarget.type === 'span')) {\n      blurTargetElement = blurTarget;\n    }\n\n    if (!responseData) {\n      disableBtnPlaceOrder(true);\n\n      EBANX.card.createToken({\n        card_number: parseInt(cardNumber.value.replace(/ /g, '')),\n        card_name: cardName.value,\n        card_due_date: (parseInt(cardExpirationMonth.value) || 0) + '/' + (parseInt(cardExpirationYear.value) || 0),\n        card_cvv: cardCvv.value,\n      }, saveToken);\n    }\n  };\n\n  const clearResponseData = () => {\n    responseData = null;\n    ebanxToken.value = '';\n    ebanxBrand.value = '';\n    ebanxMaskedCardNumber.value = '';\n    ebanxDeviceFingerprint.value = '';\n    Validation.hideAdvice({\n      advices: false,\n    }, errorDiv);\n  };\n\n  if (hasEbanxForm) {\n    ElementsObserver([\n      cardName,\n      cardNumber,\n      cardExpirationMonth,\n      cardExpirationYear,\n      cardCvv,\n    ])\n      .addChangeCallback(clearResponseData)\n      .addCompletionCallback(generateToken);\n  }\n\n  cardNumber.addEventListener('input', function (elm) {\n    setInterval(function() {\n      cardCvv.setAttribute('maxlength', 3);\n      if ((' ' + elm.target.className + ' ').indexOf(' amex ') > -1) {\n        cardCvv.setAttribute('maxlength', 4);\n      }\n\n      if ((' ' + elm.target.className + ' ').indexOf(' unknown ') > -1) {\n        cardCvv.value = '';\n      }\n    }, 200);\n  });\n};\n"]}